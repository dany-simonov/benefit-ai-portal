import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Progress } from '@/components/ui/progress';
import { recentTransactions, benefitCategories } from '@/data/mockData';
import { formatNumber } from '@/lib/utils';
import { useToast } from '@/hooks/use-toast';

export function BenefitHistory() {
  // –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ –ë–î (localStorage)
  let allocations: Record<string, number> = {};
  try {
    const saved = localStorage.getItem('benefit-allocations');
    if (saved) allocations = JSON.parse(saved);
  // eslint-disable-next-line no-empty
  } catch {}
  const { toast } = useToast();
  const [periodFilter, setPeriodFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');
  const [categoryFilter, setCategoryFilter] = useState('all');

  const handleExportExcel = () => {
    toast({
      title: "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω",
      description: "–§–∞–π–ª Excel –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥.",
    });
  };

  const getStatusBadge = (status: string) => {
    const variants = {
      completed: 'default',
      pending: 'secondary',
      failed: 'destructive'
    } as const;
    
    const labels = {
      completed: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
      pending: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
      failed: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
    };

    return (
      <Badge variant={variants[status as keyof typeof variants]}>
        {labels[status as keyof typeof labels]}
      </Badge>
    );
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">–ò—Å—Ç–æ—Ä–∏—è –ª—å–≥–æ—Ç</h1>
          <p className="text-gray-600">–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ª—å–≥–æ—Ç</p>
        </div>
        <Button onClick={handleExportExcel} variant="outline">
          üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
        </Button>
      </div>

      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle>–§–∏–ª—å—Ç—Ä—ã</CardTitle>
          <CardDescription>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="space-y-2">
              <Label>–ü–µ—Ä–∏–æ–¥</Label>
              <Select value={periodFilter} onValueChange={setPeriodFilter}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ –≤—Ä–µ–º—è</SelectItem>
                  <SelectItem value="week">–≠—Ç–∞ –Ω–µ–¥–µ–ª—è</SelectItem>
                  <SelectItem value="month">–≠—Ç–æ—Ç –º–µ—Å—è—Ü</SelectItem>
                  <SelectItem value="quarter">–≠—Ç–æ—Ç –∫–≤–∞—Ä—Ç–∞–ª</SelectItem>
                  <SelectItem value="year">–≠—Ç–æ—Ç –≥–æ–¥</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>–°—Ç–∞—Ç—É—Å</Label>
              <Select value={statusFilter} onValueChange={setStatusFilter}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</SelectItem>
                  <SelectItem value="completed">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</SelectItem>
                  <SelectItem value="pending">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</SelectItem>
                  <SelectItem value="failed">–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
              <Select value={categoryFilter} onValueChange={setCategoryFilter}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</SelectItem>
                  {benefitCategories.map((category) => (
                    <SelectItem key={category.id} value={category.id}>
                      {category.icon} {category.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>–ü–æ–∏—Å–∫</Label>
              <Input placeholder="–ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é..." />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Progress Overview */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {benefitCategories.slice(0, 3).map((category) => {
          // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç –∏–∑ –ë–î ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
          const userLimit = allocations[category.id] ?? category.totalLimit;
          const usagePercent = (category.usedPoints / userLimit) * 100;
          return (
            <Card key={category.id} className="hover:shadow-md transition-shadow">
              <CardHeader className="pb-2">
                <div className="flex items-center space-x-2">
                  <span className="text-xl">{category.icon}</span>
                  <CardTitle className="text-lg">{category.name}</CardTitle>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ</span>
                    <span>{Math.round(usagePercent)}%</span>
                  </div>
                  <Progress value={usagePercent} className="h-2" />
                  <div className="flex justify-between text-xs text-gray-500">
                    <span>{formatNumber(category.usedPoints)}</span>
                    <span>{formatNumber(userLimit)}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* Transactions Table */}
      <Card>
        <CardHeader>
          <CardTitle>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</CardTitle>
          <CardDescription>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö</CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>–î–∞—Ç–∞</TableHead>
                <TableHead>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</TableHead>
                <TableHead>–û–ø–∏—Å–∞–Ω–∏–µ</TableHead>
                <TableHead>–ë–∞–ª–ª—ã</TableHead>
                <TableHead>–°—É–º–º–∞</TableHead>
                <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {recentTransactions.map((transaction) => {
                const category = benefitCategories.find(c => c.id === transaction.categoryId);
                // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç –∏–∑ –ë–î ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                const userLimit = allocations[category?.id ?? ''] ?? category?.totalLimit;
                return (
                  <TableRow key={transaction.id}>
                    <TableCell>
                      {transaction.date.toLocaleDateString('ru-RU')}
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center space-x-2">
                        <span>{category?.icon}</span>
                        <span>{category?.name}</span>
                      </div>
                    </TableCell>
                    <TableCell>{transaction.description}</TableCell>
                    <TableCell className="text-red-600 font-medium">
                      -{formatNumber(transaction.points)}
                    </TableCell>
                    <TableCell>{formatNumber(transaction.amount)} ‚ÇΩ</TableCell>
                    <TableCell>
                      {getStatusBadge(transaction.status)}
                    </TableCell>
                  </TableRow>
                );
              })}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Timeline View (Optional) */}
      <Card>
        <CardHeader>
          <CardTitle>–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞</CardTitle>
          <CardDescription>–í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {recentTransactions.map((transaction, index) => {
              const category = benefitCategories.find(c => c.id === transaction.categoryId);
              // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç –∏–∑ –ë–î ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
              const userLimit = allocations[category?.id ?? ''] ?? category?.totalLimit;
              return (
                <div key={transaction.id} className="flex items-start space-x-4">
                  <div className="flex-shrink-0">
                    <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                      <span className="text-lg">{category?.icon}</span>
                    </div>
                    {index < recentTransactions.length - 1 && (
                      <div className="w-px h-6 bg-gray-200 ml-5 mt-2"></div>
                    )}
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between">
                      <h4 className="text-sm font-medium text-gray-900">
                        {transaction.description}
                      </h4>
                      <span className="text-sm text-gray-500">
                        {transaction.date.toLocaleDateString('ru-RU')}
                      </span>
                    </div>
                    <p className="text-sm text-gray-600">{category?.name}</p>
                    <div className="flex items-center space-x-2 mt-1">
                      <span className="text-sm font-medium text-red-600">
                        -{formatNumber(transaction.points)} –±–∞–ª–ª–æ–≤
                      </span>
                      <span className="text-sm text-gray-500">
                        ({formatNumber(transaction.amount)} ‚ÇΩ)
                      </span>
                      {getStatusBadge(transaction.status)}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
