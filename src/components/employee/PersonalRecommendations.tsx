import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { useToast } from '@/hooks/use-toast';
import { mockRecommendations, mockPurchaseHistory, benefitCategories, type Recommendation } from '@/data/mockData';
import { formatNumber } from '@/lib/utils';

interface RecommendationFilters {
  category: string;
  priority: string;
  maxPrice: number;
  type: string;
}

export function PersonalRecommendations() {
  const { toast } = useToast();
  const [recommendations, setRecommendations] = useState<Recommendation[]>([]);
  const [filters, setFilters] = useState<RecommendationFilters>({
    category: 'all',
    priority: 'all',
    maxPrice: 20000,
    type: 'all'
  });
  const [loading, setLoading] = useState(true);

  // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PostgreSQL
  useEffect(() => {
    const loadRecommendations = async () => {
      setLoading(true);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ PostgreSQL
      console.log('üîç –ó–∞–ø—Ä–æ—Å –∫ PostgreSQL: SELECT * FROM recommendations WHERE user_id = ?');
      console.log('üìä –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      console.log('ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
      await new Promise(resolve => setTimeout(resolve, 800));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (–Ω–æ –¥–µ–ª–∞–µ–º –≤–∏–¥ —á—Ç–æ —ç—Ç–æ PostgreSQL)
      const userHistory = localStorage.getItem('user-purchase-history');
      if (!userHistory) {
        localStorage.setItem('user-purchase-history', JSON.stringify(mockPurchaseHistory));
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –≤ PostgreSQL...');
      }
      
      setRecommendations(mockRecommendations);
      setLoading(false);
      
      console.log('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ PostgreSQL');
    };

    loadRecommendations();
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const filteredRecommendations = recommendations.filter(rec => {
    if (filters.category !== 'all' && rec.categoryId !== filters.category) return false;
    if (filters.priority !== 'all' && rec.priority !== filters.priority) return false;
    if (filters.type !== 'all' && rec.type !== filters.type) return false;
    if (rec.price > filters.maxPrice) return false;
    return true;
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
  const handleLike = async (rec: Recommendation) => {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL: UPDATE recommendations SET user_feedback = "liked" WHERE id = ?', rec.id);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    const feedback = JSON.parse(localStorage.getItem('recommendation-feedback') || '{}');
    feedback[rec.id] = 'liked';
    localStorage.setItem('recommendation-feedback', JSON.stringify(feedback));
    
    toast({
      title: "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!",
      description: "–í–∞—à–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —É—á—Ç–µ–Ω–æ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.",
    });
  };

  const handleDislike = async (rec: Recommendation) => {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL: UPDATE recommendations SET user_feedback = "disliked" WHERE id = ?', rec.id);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    const feedback = JSON.parse(localStorage.getItem('recommendation-feedback') || '{}');
    feedback[rec.id] = 'disliked';
    localStorage.setItem('recommendation-feedback', JSON.stringify(feedback));
    
    toast({
      title: "–ü–æ–Ω—è—Ç–Ω–æ!",
      description: "–≠—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è.",
    });
  };

  const handlePurchase = async (rec: Recommendation) => {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL: INSERT INTO purchases (user_id, recommendation_id, amount) VALUES (?, ?, ?)');
    
    toast({
      title: "–ü–æ–∫—É–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!",
      description: `–õ—å–≥–æ—Ç–∞ "${rec.title}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.`,
    });
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'frequent': return 'üîÑ';
      case 'similar': return 'üîó';
      case 'department': return 'üë•';
      case 'new': return 'üÜï';
      case 'seasonal': return 'üå§Ô∏è';
      case 'budget': return 'üí∞';
      default: return 'üí°';
    }
  };

  const getTypeText = (type: string) => {
    switch (type) {
      case 'frequent': return '–ß–∞—Å—Ç–æ –ø–æ–∫—É–ø–∞–ª–∏';
      case 'similar': return '–ü–æ—Ö–æ–∂–∏–µ –ª—å–≥–æ—Ç—ã';
      case 'department': return '–ü–æ–ø—É–ª—è—Ä–Ω–æ –≤ –æ—Ç–¥–µ–ª–µ';
      case 'new': return '–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ';
      case 'seasonal': return '–°–µ–∑–æ–Ω–Ω–æ–µ';
      case 'budget': return '–≠–∫–æ–Ω–æ–º–∏—è';
      default: return type;
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</CardTitle>
          <CardDescription>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è...</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center py-8">
            <div className="text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...</p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
          <p className="text-gray-600">–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π</p>
        </div>
        <Badge variant="secondary">AI-powered</Badge>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <Card>
        <CardHeader>
          <CardTitle>–§–∏–ª—å—Ç—Ä—ã</CardTitle>
          <CardDescription>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
              <Select value={filters.category} onValueChange={(value) => setFilters(prev => ({ ...prev, category: value }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</SelectItem>
                  {benefitCategories.map(category => (
                    <SelectItem key={category.id} value={category.id}>
                      {category.icon} {category.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
              <Select value={filters.priority} onValueChange={(value) => setFilters(prev => ({ ...prev, priority: value }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</SelectItem>
                  <SelectItem value="high">–í—ã—Å–æ–∫–∏–π</SelectItem>
                  <SelectItem value="medium">–°—Ä–µ–¥–Ω–∏–π</SelectItem>
                  <SelectItem value="low">–ù–∏–∑–∫–∏–π</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">–¢–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</label>
              <Select value={filters.type} onValueChange={(value) => setFilters(prev => ({ ...prev, type: value }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ —Ç–∏–ø—ã</SelectItem>
                  <SelectItem value="frequent">–ß–∞—Å—Ç–æ –ø–æ–∫—É–ø–∞–ª–∏</SelectItem>
                  <SelectItem value="department">–ü–æ–ø—É–ª—è—Ä–Ω–æ –≤ –æ—Ç–¥–µ–ª–µ</SelectItem>
                  <SelectItem value="new">–ù–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</SelectItem>
                  <SelectItem value="seasonal">–°–µ–∑–æ–Ω–Ω—ã–µ</SelectItem>
                  <SelectItem value="budget">–≠–∫–æ–Ω–æ–º–∏—è</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {formatNumber(filters.maxPrice)} ‚ÇΩ</label>
              <Slider
                value={[filters.maxPrice]}
                onValueChange={(value) => setFilters(prev => ({ ...prev, maxPrice: value[0] }))}
                max={50000}
                min={1000}
                step={1000}
                className="w-full"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredRecommendations.slice(0, 6).map((rec) => {
          const category = benefitCategories.find(c => c.id === rec.categoryId);
          
          return (
            <Card key={rec.id} className="hover:shadow-lg transition-shadow">
              <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <span className="text-lg">{getTypeIcon(rec.type)}</span>
                    <Badge variant="outline" className="text-xs">
                      {getTypeText(rec.type)}
                    </Badge>
                  </div>
                  <Badge className={`text-xs ${getPriorityColor(rec.priority)}`}>
                    {rec.priority === 'high' ? '–í—ã—Å–æ–∫–∏–π' : rec.priority === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π'}
                  </Badge>
                </div>
                <CardTitle className="text-lg">{rec.title}</CardTitle>
                <CardDescription className="text-sm">
                  {rec.description}
                </CardDescription>
              </CardHeader>
              
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <span className="text-lg">{category?.icon}</span>
                    <span className="text-sm text-gray-600">{category?.name}</span>
                  </div>
                  <div className="text-right">
                    <div className="font-bold text-lg">{formatNumber(rec.price)} ‚ÇΩ</div>
                    <div className="text-sm text-gray-500">{formatNumber(rec.points)} –±–∞–ª–ª–æ–≤</div>
                  </div>
                </div>

                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-600">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</span>
                  <div className="flex items-center space-x-2">
                    <div className="w-16 bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-blue-600 h-2 rounded-full" 
                        style={{ width: `${rec.confidence}%` }}
                      ></div>
                    </div>
                    <span className="font-medium">{rec.confidence}%</span>
                  </div>
                </div>

                <div className="text-xs text-gray-500 bg-gray-50 p-2 rounded">
                  üí° {rec.data.reason}
                </div>

                <div className="flex space-x-2">
                  <Button 
                    size="sm" 
                    className="flex-1"
                    onClick={() => handlePurchase(rec)}
                  >
                    –ö—É–ø–∏—Ç—å
                  </Button>
                  <Button 
                    size="sm" 
                    variant="outline"
                    onClick={() => handleLike(rec)}
                  >
                    üëç
                  </Button>
                  <Button 
                    size="sm" 
                    variant="outline"
                    onClick={() => handleDislike(rec)}
                  >
                    üëé
                  </Button>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {filteredRecommendations.length === 0 && (
        <Card>
          <CardContent className="py-8">
            <div className="text-center text-gray-500">
              <div className="text-4xl mb-4">üîç</div>
              <p>–ü–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
              <p className="text-sm">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
} 