import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

export function UserSettings() {
  const { logout } = useAuth();
  const { toast } = useToast();
  
  const [notifications, setNotifications] = useState({
    email: true,
    push: false,
    frequency: 'weekly'
  });

  const [security, setSecurity] = useState({
    twoFactor: false,
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });

  const [integrations, setIntegrations] = useState({
    yandexTaxi: true,
    deliveryClub: false,
    carsharing: true
  });

  const [general, setGeneral] = useState({
    language: 'ru',
    timezone: 'Europe/Moscow'
  });

  const handleSaveNotifications = () => {
    toast({
      title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
      description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.",
    });
  };

  const handleChangePassword = () => {
    if (security.newPassword !== security.confirmPassword) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.",
        variant: "destructive",
      });
      return;
    }

    toast({
      title: "–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω",
      description: "–í–∞—à –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.",
    });

    setSecurity(prev => ({
      ...prev,
      currentPassword: '',
      newPassword: '',
      confirmPassword: ''
    }));
  };

  const handleToggleIntegration = (service: string) => {
    setIntegrations(prev => ({
      ...prev,
      [service]: !prev[service as keyof typeof prev]
    }));

    toast({
      title: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
      description: `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${service} –∏–∑–º–µ–Ω–µ–Ω—ã.`,
    });
  };

  const loginHistory = [
    { date: '15.12.2024, 09:30', device: 'Chrome, Windows', location: '–ú–æ—Å–∫–≤–∞', status: 'success' },
    { date: '14.12.2024, 18:45', device: 'Safari, iPhone', location: '–ú–æ—Å–∫–≤–∞', status: 'success' },
    { date: '13.12.2024, 12:15', device: 'Chrome, Windows', location: '–ú–æ—Å–∫–≤–∞', status: 'success' },
    { date: '12.12.2024, 08:20', device: 'Chrome, Windows', location: '–ú–æ—Å–∫–≤–∞', status: 'success' },
  ];

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h1>
          <p className="text-gray-600">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
        </div>
        <Button variant="destructive" onClick={logout}>
          üö™ –í—ã—Ö–æ–¥
        </Button>
      </div>

      {/* Notifications Settings */}
      <Card>
        <CardHeader>
          <CardTitle>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</CardTitle>
          <CardDescription>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label>Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Label>
              <p className="text-sm text-gray-600">–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É</p>
            </div>
            <Switch
              checked={notifications.email}
              onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, email: checked }))}
            />
          </div>

          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label>Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Label>
              <p className="text-sm text-gray-600">–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
            </div>
            <Switch
              checked={notifications.push}
              onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, push: checked }))}
            />
          </div>

          <div className="space-y-2">
            <Label>–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</Label>
            <Select value={notifications.frequency} onValueChange={(value) => setNotifications(prev => ({ ...prev, frequency: value }))}>
              <SelectTrigger className="w-full">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</SelectItem>
                <SelectItem value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</SelectItem>
                <SelectItem value="monthly">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</SelectItem>
                <SelectItem value="never">–ù–∏–∫–æ–≥–¥–∞</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <Button onClick={handleSaveNotifications}>
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          </Button>
        </CardContent>
      </Card>

      {/* Security Settings */}
      <Card>
        <CardHeader>
          <CardTitle>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</CardTitle>
          <CardDescription>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label>–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</Label>
              <p className="text-sm text-gray-600">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</p>
            </div>
            <Switch
              checked={security.twoFactor}
              onCheckedChange={(checked) => setSecurity(prev => ({ ...prev, twoFactor: checked }))}
            />
          </div>

          <Separator />

          <div className="space-y-4">
            <h4 className="font-medium">–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è</h4>
            
            <div className="space-y-2">
              <Label htmlFor="current-password">–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å</Label>
              <Input
                id="current-password"
                type="password"
                value={security.currentPassword}
                onChange={(e) => setSecurity(prev => ({ ...prev, currentPassword: e.target.value }))}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="new-password">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</Label>
              <Input
                id="new-password"
                type="password"
                value={security.newPassword}
                onChange={(e) => setSecurity(prev => ({ ...prev, newPassword: e.target.value }))}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="confirm-password">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Label>
              <Input
                id="confirm-password"
                type="password"
                value={security.confirmPassword}
                onChange={(e) => setSecurity(prev => ({ ...prev, confirmPassword: e.target.value }))}
              />
            </div>

            <Button onClick={handleChangePassword}>
              –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* General Settings */}
      <Card>
        <CardHeader>
          <CardTitle>–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</CardTitle>
          <CardDescription>–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</Label>
              <Select value={general.language} onValueChange={(value) => setGeneral(prev => ({ ...prev, language: value }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="ru">–†—É—Å—Å–∫–∏–π</SelectItem>
                  <SelectItem value="en">English</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</Label>
              <Select value={general.timezone} onValueChange={(value) => setGeneral(prev => ({ ...prev, timezone: value }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Europe/Moscow">–ú–æ—Å–∫–≤–∞ (UTC+3)</SelectItem>
                  <SelectItem value="Europe/Samara">–°–∞–º–∞—Ä–∞ (UTC+4)</SelectItem>
                  <SelectItem value="Asia/Yekaterinburg">–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Login History */}
      <Card>
        <CardHeader>
          <CardTitle>–ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤</CardTitle>
          <CardDescription>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ–∞–Ω—Å—ã –≤ —Å–∏—Å—Ç–µ–º–µ</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {loginHistory.map((login, index) => (
              <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                    <span className="text-green-600 text-xs">‚úì</span>
                  </div>
                  <div>
                    <p className="font-medium">{login.device}</p>
                    <p className="text-sm text-gray-600">{login.date}</p>
                  </div>
                </div>
                <div className="text-right">
                  <Badge variant="outline">
                    {login.location}
                  </Badge>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
