
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { useAuth } from '@/contexts/AuthContext';
import { benefitCategories } from '@/data/mockData';
import { formatNumber } from '@/lib/utils';
import { useToast } from '@/hooks/use-toast';

export function UserProfile() {
  const { user } = useAuth();
  const { toast } = useToast();
  const [isEditing, setIsEditing] = useState(false);
  const [profileData, setProfileData] = useState({
    name: user?.name || '',
    email: user?.email || '',
    phone: '+7 (999) 123-45-67',
    city: '–ú–æ—Å–∫–≤–∞',
    department: user?.department || '',
  });

  const [preferences, setPreferences] = useState({
    transport: true,
    food: true,
    health: false,
    education: true,
    entertainment: false,
  });

  const handleSaveProfile = () => {
    toast({
      title: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
      description: "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
    });
    setIsEditing(false);
  };

  const handlePreferenceChange = (categoryId: string, checked: boolean) => {
    setPreferences(prev => ({
      ...prev,
      [categoryId]: checked
    }));
  };

  const pointsHistory = [
    { date: '01.12.2024', amount: 25000, type: '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ', description: '–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ' },
    { date: '01.11.2024', amount: 25000, type: '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ', description: '–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ' },
    { date: '15.10.2024', amount: 5000, type: '–ë–æ–Ω—É—Å', description: '–ó–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π' },
    { date: '01.10.2024', amount: 25000, type: '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ', description: '–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ' },
  ];

  const frequentBenefits = [
    { category: 'transport', name: '–Ø–Ω–¥–µ–∫—Å.–¢–∞–∫—Å–∏', usage: '15 —Ä–∞–∑' },
    { category: 'food', name: 'Delivery Club', usage: '8 —Ä–∞–∑' },
    { category: 'transport', name: '–ö–∞—Ä—à–µ—Ä–∏–Ω–≥', usage: '5 —Ä–∞–∑' },
  ];

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h1>
          <p className="text-gray-600">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</p>
        </div>
        <Button 
          onClick={isEditing ? handleSaveProfile : () => setIsEditing(true)}
          variant={isEditing ? "default" : "outline"}
        >
          {isEditing ? 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
        </Button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Personal Information */}
        <Card className="lg:col-span-2">
          <CardHeader>
            <CardTitle>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</CardTitle>
            <CardDescription>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="name">–§–ò–û</Label>
                <Input
                  id="name"
                  value={profileData.name}
                  onChange={(e) => setProfileData(prev => ({ ...prev, name: e.target.value }))}
                  disabled={!isEditing}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={profileData.email}
                  onChange={(e) => setProfileData(prev => ({ ...prev, email: e.target.value }))}
                  disabled={!isEditing}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
                <Input
                  id="phone"
                  value={profileData.phone}
                  onChange={(e) => setProfileData(prev => ({ ...prev, phone: e.target.value }))}
                  disabled={!isEditing}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="city">–ì–æ—Ä–æ–¥</Label>
                <Input
                  id="city"
                  value={profileData.city}
                  onChange={(e) => setProfileData(prev => ({ ...prev, city: e.target.value }))}
                  disabled={!isEditing}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="department">–û—Ç–¥–µ–ª</Label>
                <Input
                  id="department"
                  value={profileData.department}
                  disabled
                />
              </div>

              <div className="space-y-2">
                <Label>–°—Ç–∞—Ç—É—Å</Label>
                <div>
                  <Badge variant="default">–ê–∫—Ç–∏–≤–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫</Badge>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Balance Info */}
        <Card>
          <CardHeader>
            <CardTitle>–ë–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-center space-y-2">
              <div className="text-3xl font-bold text-green-600">
                {formatNumber(user?.pointsBalance || 0)}
              </div>
              <p className="text-sm text-gray-600">–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤</p>
              <Badge variant="secondary" className="text-xs">
                –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è
              </Badge>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Points History */}
      <Card>
        <CardHeader>
          <CardTitle>–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π</CardTitle>
          <CardDescription>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –Ω–∞ —Å—á–µ—Ç</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {pointsHistory.map((item, index) => (
              <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                    <span className="text-green-600 text-sm">+</span>
                  </div>
                  <div>
                    <p className="font-medium">{item.description}</p>
                    <p className="text-sm text-gray-600">{item.date}</p>
                  </div>
                </div>
                <div className="text-right">
                  <p className="font-medium text-green-600">
                    +{formatNumber(item.amount)} –±–∞–ª–ª–æ–≤
                  </p>
                  <Badge variant="outline" className="text-xs">
                    {item.type}
                  </Badge>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Preferred Categories */}
      <Card>
        <CardHeader>
          <CardTitle>–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</CardTitle>
          <CardDescription>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª—å–≥–æ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {benefitCategories.map((category) => (
              <div key={category.id} className="flex items-center space-x-3 p-3 border rounded-lg">
                <Checkbox
                  id={category.id}
                  checked={preferences[category.id as keyof typeof preferences]}
                  onCheckedChange={(checked) => handlePreferenceChange(category.id, checked as boolean)}
                />
                <div className="flex items-center space-x-2">
                  <span className="text-lg">{category.icon}</span>
                  <label htmlFor={category.id} className="text-sm font-medium cursor-pointer">
                    {category.name}
                  </label>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Frequent Benefits */}
      <Card>
        <CardHeader>
          <CardTitle>–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ª—å–≥–æ—Ç—ã</CardTitle>
          <CardDescription>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {frequentBenefits.map((benefit, index) => {
              const category = benefitCategories.find(c => c.id === benefit.category);
              
              return (
                <div key={index} className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                  <div className="flex items-center space-x-3">
                    <span className="text-lg">{category?.icon}</span>
                    <div>
                      <p className="font-medium">{benefit.name}</p>
                      <p className="text-sm text-gray-600">{category?.name}</p>
                    </div>
                  </div>
                  <Badge variant="outline">
                    {benefit.usage}
                  </Badge>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
