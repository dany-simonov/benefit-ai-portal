import { test, expect } from '@playwright/test';

test.describe('Recommendations System E2E Tests', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the application
    await page.goto('http://localhost:8081/benefit-ai-portal/');
    
    // Login as employee
    await page.click('text=–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
    await page.fill('input[type="email"]', 'employee@company.com');
    await page.fill('input[type="password"]', 'password123');
    await page.click('button[type="submit"]');
    
    // Wait for login to complete
    await page.waitForURL('**/employee/dashboard');
  });

  test('should display personal recommendations on dashboard', async ({ page }) => {
    // Navigate to dashboard
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/dashboard');
    
    // Wait for recommendations to load
    await page.waitForSelector('text=–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Verify recommendations are displayed
    await expect(page.locator('text=–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')).toBeVisible();
    await expect(page.locator('text=AI-powered')).toBeVisible();
    
    // Check that at least one recommendation card is present
    const recommendationCards = page.locator('[data-testid="recommendation-card"]');
    await expect(recommendationCards.first()).toBeVisible();
  });

  test('should filter recommendations by category', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Open category filter
    await page.click('text=–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    
    // Select specific category
    await page.click('text=–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç');
    
    // Verify filtered results
    await expect(page.locator('text=üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç')).toBeVisible();
  });

  test('should filter recommendations by priority', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Open priority filter
    await page.click('text=–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã');
    
    // Select high priority
    await page.click('text=–í—ã—Å–æ–∫–∏–π');
    
    // Verify filtered results show high priority badges
    await expect(page.locator('text=–í—ã—Å–æ–∫–∏–π')).toBeVisible();
  });

  test('should filter recommendations by price', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Adjust price slider
    const slider = page.locator('input[type="range"]');
    await slider.fill('10000'); // Set max price to 10,000
    
    // Verify price filter is applied
    await expect(page.locator('text=–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 10 000 ‚ÇΩ')).toBeVisible();
  });

  test('should handle like action on recommendation', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Click like button on first recommendation
    const likeButton = page.locator('button:has-text("üëç")').first();
    await likeButton.click();
    
    // Verify toast notification appears
    await expect(page.locator('text=–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!')).toBeVisible();
  });

  test('should handle dislike action on recommendation', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Click dislike button on first recommendation
    const dislikeButton = page.locator('button:has-text("üëé")').first();
    await dislikeButton.click();
    
    // Verify toast notification appears
    await expect(page.locator('text=–ü–æ–Ω—è—Ç–Ω–æ!')).toBeVisible();
  });

  test('should handle purchase action on recommendation', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Click purchase button on first recommendation
    const purchaseButton = page.locator('button:has-text("–ö—É–ø–∏—Ç—å")').first();
    await purchaseButton.click();
    
    // Verify toast notification appears
    await expect(page.locator('text=–ü–æ–∫—É–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!')).toBeVisible();
  });

  test('should display recommendation details correctly', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Verify recommendation card structure
    const recommendationCard = page.locator('[data-testid="recommendation-card"]').first();
    
    // Check title
    await expect(recommendationCard.locator('h3')).toBeVisible();
    
    // Check description
    await expect(recommendationCard.locator('p')).toBeVisible();
    
    // Check confidence score
    await expect(recommendationCard.locator('text=/\\d+%/')).toBeVisible();
    
    // Check price
    await expect(recommendationCard.locator('text=/\\d+ ‚ÇΩ/')).toBeVisible();
  });

  test('should show loading state while fetching recommendations', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Verify loading state appears briefly
    await expect(page.locator('text=–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è...')).toBeVisible();
    
    // Wait for loading to complete
    await page.waitForSelector('text=–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
  });

  test('should display empty state when no recommendations match filters', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Set very low price filter to show no results
    const slider = page.locator('input[type="range"]');
    await slider.fill('100'); // Set max price to 100
    
    // Verify empty state message
    await expect(page.locator('text=–ü–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')).toBeVisible();
  });

  test('should navigate to recommendations from dashboard', async ({ page }) => {
    // Navigate to dashboard
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/dashboard');
    
    // Click on recommendations button
    await page.click('text=ü§ñ –í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
    
    // Verify navigation to recommendations page
    await expect(page.locator('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')).toBeVisible();
  });

  test('should display recommendation statistics', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Verify statistics cards
    await expect(page.locator('text=–í—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')).toBeVisible();
    await expect(page.locator('text=–¢–æ—á–Ω–æ—Å—Ç—å')).toBeVisible();
    await expect(page.locator('text=–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ')).toBeVisible();
    await expect(page.locator('text=–≠–∫–æ–Ω–æ–º–∏—è')).toBeVisible();
  });

  test('should show recommendation types with correct icons', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Verify different recommendation types are displayed
    await expect(page.locator('text=–ß–∞—Å—Ç–æ –ø–æ–∫—É–ø–∞–ª–∏')).toBeVisible();
    await expect(page.locator('text=–ü–æ–ø—É–ª—è—Ä–Ω–æ –≤ –æ—Ç–¥–µ–ª–µ')).toBeVisible();
    await expect(page.locator('text=–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')).toBeVisible();
  });

  test('should handle recommendation feedback persistence', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Click like on a recommendation
    const likeButton = page.locator('button:has-text("üëç")').first();
    await likeButton.click();
    
    // Refresh page
    await page.reload();
    
    // Wait for page to load again
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Verify feedback was persisted (this would be checked in localStorage in a real test)
    // For now, just verify the page loads correctly
    await expect(page.locator('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')).toBeVisible();
  });

  test('should display recommendation confidence scores', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Verify confidence scores are displayed
    const confidenceElements = page.locator('text=/\\d+%/');
    await expect(confidenceElements.first()).toBeVisible();
    
    // Verify confidence progress bars are present
    const progressBars = page.locator('.bg-blue-600');
    await expect(progressBars.first()).toBeVisible();
  });

  test('should show recommendation reasons', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Verify recommendation reasons are displayed
    await expect(page.locator('text=üí°')).toBeVisible();
  });

  test('should handle mobile responsive design', async ({ page }) => {
    // Set mobile viewport
    await page.setViewportSize({ width: 375, height: 667 });
    
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Verify page is responsive
    await expect(page.locator('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')).toBeVisible();
    
    // Verify filters are accessible on mobile
    await expect(page.locator('text=–§–∏–ª—å—Ç—Ä—ã')).toBeVisible();
  });

  test('should display recommendation priority badges correctly', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Verify priority badges are displayed
    await expect(page.locator('text=–í—ã—Å–æ–∫–∏–π')).toBeVisible();
    await expect(page.locator('text=–°—Ä–µ–¥–Ω–∏–π')).toBeVisible();
    await expect(page.locator('text=–ù–∏–∑–∫–∏–π')).toBeVisible();
  });

  test('should handle recommendation purchase flow', async ({ page }) => {
    // Navigate to recommendations page
    await page.goto('http://localhost:8081/benefit-ai-portal/#/employee/recommendations');
    
    // Wait for page to load
    await page.waitForSelector('text=–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', { timeout: 10000 });
    
    // Get recommendation title before purchase
    const recommendationTitle = await page.locator('h3').first().textContent();
    
    // Click purchase button
    const purchaseButton = page.locator('button:has-text("–ö—É–ø–∏—Ç—å")').first();
    await purchaseButton.click();
    
    // Verify purchase confirmation
    await expect(page.locator(`text=–õ—å–≥–æ—Ç–∞ "${recommendationTitle}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É`)).toBeVisible();
  });
}); 