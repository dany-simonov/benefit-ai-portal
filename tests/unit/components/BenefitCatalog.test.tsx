import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { BenefitCatalog } from '@/components/employee/BenefitCatalog';

// Mock dependencies
jest.mock('@/hooks/use-toast', () => ({
  useToast: () => ({
    toast: jest.fn()
  })
}));

jest.mock('@/data/mockData', () => ({
  benefitCategories: [
    {
      id: 'transport',
      name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
      icon: 'üöó',
      totalLimit: 50000,
      usedPoints: 15000
    },
    {
      id: 'food',
      name: '–ü–∏—Ç–∞–Ω–∏–µ',
      icon: 'üçï',
      totalLimit: 30000,
      usedPoints: 8000
    }
  ]
}));

describe('BenefitCatalog Component', () => {
  beforeEach(() => {
    localStorage.clear();
  });

  test('renders benefit categories', () => {
    render(<BenefitCatalog />);
    
    expect(screen.getByText('–ö–∞—Ç–∞–ª–æ–≥ –ª—å–≥–æ—Ç')).toBeInTheDocument();
    expect(screen.getByText('üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç')).toBeInTheDocument();
    expect(screen.getByText('üçï –ü–∏—Ç–∞–Ω–∏–µ')).toBeInTheDocument();
  });

  test('displays category information correctly', () => {
    render(<BenefitCatalog />);
    
    expect(screen.getByText('35 000 ‚ÇΩ')).toBeInTheDocument(); // remaining points
    expect(screen.getByText('15 000 ‚ÇΩ')).toBeInTheDocument(); // used points
  });

  test('shows allocation limits from localStorage', () => {
    // Mock localStorage data
    const mockAllocations = {
      transport: 20000,
      food: 10000
    };
    localStorage.setItem('benefit-allocations', JSON.stringify(mockAllocations));
    
    render(<BenefitCatalog />);
    
    expect(screen.getByText('20 000 ‚ÇΩ')).toBeInTheDocument();
    expect(screen.getByText('10 000 ‚ÇΩ')).toBeInTheDocument();
  });

  test('handles category selection', () => {
    render(<BenefitCatalog />);
    
    const transportCard = screen.getByText('üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç').closest('.cursor-pointer');
    fireEvent.click(transportCard);
    
    // Verify selection state
    expect(transportCard).toHaveClass('ring-2');
  });

  test('displays progress bars correctly', () => {
    render(<BenefitCatalog />);
    
    const progressBars = document.querySelectorAll('[role="progressbar"]');
    expect(progressBars.length).toBeGreaterThan(0);
  });

  test('shows recommended benefits section', () => {
    render(<BenefitCatalog />);
    
    expect(screen.getByText('üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–ª—è –≤–∞—Å')).toBeInTheDocument();
    expect(screen.getByText('–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫')).toBeInTheDocument();
  });

  test('handles empty allocations gracefully', () => {
    render(<BenefitCatalog />);
    
    // Component should render without errors even with empty allocations
    expect(screen.getByText('–ö–∞—Ç–∞–ª–æ–≥ –ª—å–≥–æ—Ç')).toBeInTheDocument();
  });

  test('displays category icons correctly', () => {
    render(<BenefitCatalog />);
    
    expect(screen.getByText('üöó')).toBeInTheDocument();
    expect(screen.getByText('üçï')).toBeInTheDocument();
  });

  test('shows remaining points calculation', () => {
    render(<BenefitCatalog />);
    
    // Should show remaining points (totalLimit - usedPoints)
    expect(screen.getByText('35 000 ‚ÇΩ')).toBeInTheDocument(); // 50000 - 15000
  });

  test('handles localStorage errors gracefully', () => {
    // Mock localStorage to throw error
    const originalGetItem = localStorage.getItem;
    localStorage.getItem = jest.fn(() => {
      throw new Error('Storage error');
    });
    
    render(<BenefitCatalog />);
    
    // Component should still render
    expect(screen.getByText('–ö–∞—Ç–∞–ª–æ–≥ –ª—å–≥–æ—Ç')).toBeInTheDocument();
    
    // Restore original function
    localStorage.getItem = originalGetItem;
  });
}); 